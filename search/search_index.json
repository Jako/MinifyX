{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MinifyX","text":"<p>MinifyX is a MODX Revolution extra that allows to combine and minify JS and CSS files to speed up your site and reduce server load.</p>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>MODX Revolution 2.8+</li> <li>PHP 7.4+</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Add js and css files to be combined with the MinifyX snippet</li> <li>Optionally register the files with the MODX API methods</li> <li>Combine and minify all files registered with the MODX API methods by the MinifyX plugin</li> <li>Optionally minify HTML</li> </ul>"},{"location":"#license","title":"License","text":"<p>The project is licensed under the GPLv2 license.</p>"},{"location":"#translations","title":"Translations","text":"<p>Translations of the package can be made for the Default Lexicon, the Properties Lexicon and the System Setting Lexicon</p>"},{"location":"contributors/","title":"Contributors","text":"<p>The MinifyX project was started in 2021 by Patrick Nijkamp. It was developed further by Vasily Naumkin and Sergey Shlokov. It is maintained and developed further since 2021 by Thomas Jakobi</p> <p>Many thanks to all who contributed, whether by creating pull requests, submitting bug reports, or donating.</p>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#snippet","title":"Snippet","text":"<p>To use the snippet, you can use the following full snippet call with default and example values:</p> <pre><code>[[!MinifyX?\n&amp;cssFilename=`style`\n&amp;cssPlaceholder=`MinifyX.css`\n&amp;cssSources=`\nassets/css/bootstrap.min.css,\nassets/css/styles.css,\n`\n&amp;cssTpl=`tplMinifyXcss`\n&amp;forceUpdate=`0`\n&amp;jsFilename=`scripts`\n&amp;jsPlaceholder=`MinifyX.javascript`\n&amp;jsSources=`\nassets/js/jquery.js,\nassets/js/bootstrap.bundle.min.js,\n`\n&amp;jsTpl=`tplMinifyXjs`\n&amp;minifyCss=`0`\n&amp;minifyJs=`0`\n&amp;registerCss=`placeholder`\n&amp;registerJs=`placeholder`\n]]\n</code></pre> <p>The following placeholders have to be added in the template.</p> <pre><code>[[!+MinifyX.javascript]]\n[[!+MinifyX.css]]\n</code></pre> <p>The snippet and the placeholder have to be called both uncached or both cached. If they are called cached, the generated minified files are only created when the resource is not cached, so you can't change the minified assets on the fly.</p> <p>There is an internal MinifyX cache used, so it is not a real issue to call the snippet uncached.</p>"},{"location":"examples/#use-without-placeholder","title":"Use without placeholder","text":"<p>If you don't want to use the placeholder, you can replace the following lines in the snippet call above.</p> <pre><code>&amp;registerCss=`default`\n&amp;registerJs=`default`\n</code></pre> <p>That way, the snippet will insert the script and style tags automatically in the code with the MODX regClient methods.</p>"},{"location":"examples/#plugin","title":"Plugin","text":"<p>All registered javascript and stylesheet files of other MODX extras can be at least combined and optionally minified. To combine the files you have to enable the <code>minifyx.processRegistered</code> system setting. To minify the registered javascripts, you have to enable <code>minifyx.minifyJs</code>. To minify the registered styles, you have to enable <code>minifyx.minifyCss</code>.</p> <p>To register javascript and stylesheet files directly on the page with the MODX regClient API methods, you can use the following example:</p> <pre><code>[[*id:input=`assets/css/bootstrap.min.css`:cssToHead]]\n[[*id:input=`assets/css/styles.css`:cssToHead]]\n[[*id:input=`assets/js/jquery.js`:jsToHead]]\n[[*id:input=`assets/js/bootstrap.bundle.min.js`:jsToHead]]\n[[*id:input=`assets/js/scripts.js`:jsToBottom]]\n</code></pre>"},{"location":"examples/#debugging","title":"Debugging","text":"<p>If you are facing issues with MinifyX, you can use the <code>minifyx.debug</code> system setting. If this setting is enabled, the added files to the assets collection are logged with the server path. </p> <p>All errors inside Assetic are logged without enabling this system setting. Assetic will throw an error, when the file is not found, parts of the scripts and styles are invalid etc.</p> <p>So please use the MODX error log first to locate MinifyX issues. If you detect a bug inside MinifyX, feel free to add it to the bug tracker</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#install-from-modx-extras","title":"Install from MODX Extras","text":"<p>Search for MinifyX in the Package Manager of your MODX installation and install it in there.</p>"},{"location":"installation/#manual-installation","title":"Manual installation","text":"<p>If you can't access the MODX Extras Repository in your MODX installation, you can manually install MinifyX.</p> <ul> <li>Download the transport package from MODX Extras (or one of the pre built transport packages in _packages)</li> <li>Upload the zip file to your MODX installation's <code>core/packages</code> folder or upload it manually in the MODX Package Manager.</li> <li>In the MODX Manager, navigate to the Package Manager page, and select 'Search locally for packages' from the dropdown button.</li> <li>MinifyX should now show up in the list of available packages. Click the corresponding 'Install' button and follow the instructions to complete the installation.</li> </ul>"},{"location":"installation/#build-it-from-source","title":"Build it from source","text":"<p>To build and install the package from source you could use Git Package Management. The GitHub repository of MinifyX contains a config.json to build that package locally. Use this option, if you want to debug MinifyX and/or contribute bugfixes and enhancements.</p>"},{"location":"usage/","title":"Usage","text":"<p>After the package is installed, you can use the snippet and the plugin to create combined and optionally minified assets.</p>"},{"location":"usage/#snippet","title":"Snippet","text":"<p>This snippet combines and optionally minifies the referenced javascript and stylesheet files.</p> <p>The following properties can be used in the snippet call:</p> Property Description Default cssFilename Base name of the css file, without extension The according system setting cssPlaceholder Name of the css placeholder. Used when &amp;registerCss is set to placeholder MinifyX.css cssSources Comma-separated list of CSS files for processing. You can specify .css, .less, and *.scss files. - cssTpl Name of a template chunk for the CSS tag. The placeholder \"[[+file]]\" must be present. The according system setting forceUpdate Disable MinifyX cache and generate new scripts and styles every time. No jsFilename Base name of the js file, without extension The according system setting jsPlaceholder Name of javascript placeholder. Used when &amp;registerCss is set to placeholder MinifyX.javascript jsSources Comma-separated list of JS files for processing. You can specify *.js files. - jsTpl Name of a template chunk for the JS tag. Placeholder \"[[+file]]\" must exists. The according system setting minifyCss Turn on CSS minification?? No minifyJs Turn on JS minification? No registerCss How do you want the CSS to be registered? It can be output in the placeholder, called in the \"head\" tag (Default) or output immediately (Print). placeholder registerJs How do you want the javascript to be registered? It can be output in the placeholder, called in the \"head\" tag (Startup), placed before the closing \"body\" tag (Default) or output immediately (Print). placeholder"},{"location":"usage/#plugin","title":"Plugin","text":"<p>This plugin combines and optionally minifies the registered javascript and stylesheet files registered with the MODX API.</p> <p>It can be configured with the MinifyX system settings.</p>"},{"location":"usage/#system-settings","title":"System Settings","text":"<p>MinifyX uses the following system settings in the namespace <code>minifyx</code>:</p> Key Description Default cacheFolder Specify the folder where the plugin will put the results of it\u2019s work. You can specify a non-existent folder, it will be created automatically. assets/minifyx/ cacheUrl Specify the url where the plugin will put the results of it\u2019s work. It has to point to the cache folder. assets/minifyx/ cssFilename Specify the name of the prepared CSS file that will contain all processed scripts. To it will be added the time of creation and suffix .min, if compression is enabled. styles cssTpl Name of a template chunk for the CSS tag. Placeholder \"[[+file]]\" must exists. tplMinifyXcss debug Log debug information in the MODX error log. No excludeRegistered A regular expression for exclude files from processing. By default excludes scripts and styles prepared by snippet MinifyX. #(scripts|styles)_[a-z0-9]{11}.#i jsFilename Specify the name of the prepared javascript file that will contain all processed scripts. To it will be added the time of creation and suffix .min, if compression is enabled scripts jsTpl Name of a template chunk for the JS tag. Placeholder \"[[+file]]\" must exists. tplMinifyXjs minifyCss You can enable compression CSS compression. All files that have suffix .min in the name will be skipped. No minifyHtml Compress the page content before output. No minifyJs You can enable compression javascript compression. All files that have suffix .min in the name will be skipped. No processRegistered You can enable automatic processing of all registered scripts and styles of the page using the plugin MinifyX. No"}]}